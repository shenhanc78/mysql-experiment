diff -r -U8 mysql-8.0.29.orig/cmake/build_configurations/compiler_options.cmake mysql-8.0.29/cmake/build_configurations/compiler_options.cmake
--- mysql-8.0.29.orig/cmake/build_configurations/compiler_options.cmake	2022-03-23 06:52:57.000000000 -0700
+++ mysql-8.0.29/cmake/build_configurations/compiler_options.cmake	2022-06-23 11:26:45.240926187 -0700
@@ -25,17 +25,19 @@
 INCLUDE(cmake/floating_point.cmake)
 
 SET(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
 # Compiler options
 IF(UNIX)  
 
   IF(MY_COMPILER_IS_GNU_OR_CLANG AND NOT SOLARIS)
-    SET(SECTIONS_FLAG "-ffunction-sections -fdata-sections")
+    # SET(SECTIONS_FLAG "-ffunction-sections -fdata-sections")
+    # shenhan: I commented out the previous line, and added the following line.
+    SET(SECTIONS_FLAG)
   ELSE()
     SET(SECTIONS_FLAG)
   ENDIF()
 
   # Default GCC flags
   IF(MY_COMPILER_IS_GNU)
     SET(COMMON_C_FLAGS               "-fno-omit-frame-pointer")
     # Disable inline optimizations for valgrind testing to avoid false positives
diff -r -U8 mysql-8.0.29.orig/cmake/fprofile.cmake mysql-8.0.29/cmake/fprofile.cmake
--- mysql-8.0.29.orig/cmake/fprofile.cmake	2022-03-23 06:52:57.000000000 -0700
+++ mysql-8.0.29/cmake/fprofile.cmake	2022-06-23 11:26:45.240926187 -0700
@@ -90,31 +90,31 @@
 ELSE()
   SET(FPROFILE_DIR_DEFAULT "${CMAKE_BINARY_DIR}/../profile-data")
 ENDIF()
 
 IF(NOT DEFINED FPROFILE_DIR)
   SET(FPROFILE_DIR "${FPROFILE_DIR_DEFAULT}")
 ENDIF()
 
-OPTION(FPROFILE_GENERATE "Add -fprofile-generate" OFF)
+OPTION(FPROFILE_GENERATE "Add -fprofile-instr-generate" OFF)
 IF(FPROFILE_GENERATE)
-  STRING_APPEND(CMAKE_C_FLAGS " -fprofile-generate=${FPROFILE_DIR}")
-  STRING_APPEND(CMAKE_CXX_FLAGS " -fprofile-generate=${FPROFILE_DIR}")
+  STRING_APPEND(CMAKE_C_FLAGS " -fprofile-instr-generate=${FPROFILE_DIR}")
+  STRING_APPEND(CMAKE_CXX_FLAGS " -fprofile-instr-generate=${FPROFILE_DIR}")
 
   IF(MY_COMPILER_IS_GNU)
     STRING_APPEND(CMAKE_C_FLAGS " -fprofile-update=prefer-atomic")
     STRING_APPEND(CMAKE_CXX_FLAGS " -fprofile-update=prefer-atomic")
   ENDIF()
 ENDIF()
 
 OPTION(FPROFILE_USE "Add -fprofile-use" OFF)
 IF(FPROFILE_USE)
-  STRING_APPEND(CMAKE_C_FLAGS " -fprofile-use=${FPROFILE_DIR}")
-  STRING_APPEND(CMAKE_CXX_FLAGS " -fprofile-use=${FPROFILE_DIR}")
+  STRING_APPEND(CMAKE_C_FLAGS " -fprofile-instr-use=${FPROFILE_DIR}")
+  STRING_APPEND(CMAKE_CXX_FLAGS " -fprofile-instr-use=${FPROFILE_DIR}")
   # Collection of profile data is not thread safe,
   # use -fprofile-correction for GCC
   IF(MY_COMPILER_IS_GNU)
     STRING_APPEND(CMAKE_C_FLAGS " -fprofile-correction")
     STRING_APPEND(CMAKE_CXX_FLAGS " -fprofile-correction")
 
     # With -fprofile-use all portions of programs not executed during
     # train run are optimized agressively for size rather than speed.
diff -r -U8 mysql-8.0.29.orig/cmake/libevent.cmake mysql-8.0.29/cmake/libevent.cmake
--- mysql-8.0.29.orig/cmake/libevent.cmake	2022-03-23 06:52:57.000000000 -0700
+++ mysql-8.0.29/cmake/libevent.cmake	2022-06-23 11:26:57.801074024 -0700
@@ -29,40 +29,40 @@
 SET(MIN_LIBEVENT_VERSION_REQUIRED "2.1")
 
 MACRO(FIND_LIBEVENT_VERSION)
   SET(TEST_SRC
     "#include <event.h>
      #include <stdio.h>
     int main()
     {
-      fprintf(stdout, \"%s\", LIBEVENT_VERSION);
+      fprintf(stdout, \">>>%s<<<\", LIBEVENT_VERSION);
     }
     "
     )
   FILE(WRITE
     "${CMAKE_BINARY_DIR}/find_libevent_version.c"
     "${TEST_SRC}"
     )
   TRY_RUN(TEST_RUN_RESULT COMPILE_TEST_RESULT
     ${CMAKE_BINARY_DIR}
     "${CMAKE_BINARY_DIR}/find_libevent_version.c"
     CMAKE_FLAGS "-DINCLUDE_DIRECTORIES=${LIBEVENT_INCLUDE_DIRS}"
     COMPILE_OUTPUT_VARIABLE OUTPUT
     RUN_OUTPUT_VARIABLE RUN_OUTPUT
     )
-  # MESSAGE(STATUS "TRY_EVENT TEST_RUN_RESULT is ${TEST_RUN_RESULT}")
-  # MESSAGE(STATUS "TRY_EVENT COMPILE_TEST_RESULT is ${COMPILE_TEST_RESULT}")
-  # MESSAGE(STATUS "TRY_EVENT COMPILE_OUTPUT_VARIABLE is ${OUTPUT}")
-  # MESSAGE(STATUS "TRY_EVENT RUN_OUTPUT_VARIABLE is ${RUN_OUTPUT}")
+  MESSAGE(STATUS "TRY_EVENT TEST_RUN_RESULT is ${TEST_RUN_RESULT}")
+  MESSAGE(STATUS "TRY_EVENT COMPILE_TEST_RESULT is ${COMPILE_TEST_RESULT}")
+  MESSAGE(STATUS "TRY_EVENT COMPILE_OUTPUT_VARIABLE is ${OUTPUT}")
+  MESSAGE(STATUS "TRY_EVENT RUN_OUTPUT_VARIABLE is ${RUN_OUTPUT}")
 
   IF(COMPILE_TEST_RESULT)
     SET(LIBEVENT_VERSION_STRING "${RUN_OUTPUT}")
     STRING(REGEX REPLACE
-      "([.-0-9]+).*" "\\1" LIBEVENT_VERSION "${LIBEVENT_VERSION_STRING}")
+      ".*>>>([.-0-9]+).*<<<" "\\1" LIBEVENT_VERSION "${LIBEVENT_VERSION_STRING}")
   ELSE()
     MESSAGE(WARNING "Could not determine LIBEVENT_VERSION")
   ENDIF()
 
   MESSAGE(STATUS "LIBEVENT_VERSION (${WITH_LIBEVENT}) ${LIBEVENT_VERSION}")
   MESSAGE(STATUS "LIBEVENT_INCLUDE_DIRS ${LIBEVENT_INCLUDE_DIRS}")
   MESSAGE(STATUS "LIBEVENT_LIBRARIES ${LIBEVENT_LIBRARIES}")
 ENDMACRO()
